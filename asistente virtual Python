import  AVMSpeechMath  as  sm
#import  AVMYT  as  yt
import  spoty
import speech_recognition as  sr
import  pyttsx3
import  pywhatkit
import  json
from  datetime  import  datetime , date , timedelta
import  wikipedia
import  pyjokes
from  time   import time 

start_time  =  time ()
motor  =  pyttsx3.init()

# nombre del asistente virtual
nombre  =  'alexa'
attemts  =  0

# llaves
with open('src/keys.json´') as  json_file :
    keys  =  json.load(json_file) 

# colores
green_color =  " \033 [1;32;40m"
red_color =  " \033 [1;31;40m"
normal_color  =  " \033 [0;37;40m"

# obtener voces y establecer la primera de ellas
voices  = engine.getproperty( 'voces' )
engine.setProperty ( 'voz' , voces [ 0 ]. id )

# editar la configuración predeterminada
engine.setProperty ( 'tasa' , 178 )
engine.setProperty ( 'volumen' , 0.7 )

day_es  = [ linea . rstrip ( ' \n ' ) for line in open( 'src/day/day_es.txt' )]
day_es  = [ líne.rstrip ( ' \n ') for line in open  ( 'src/day/day_en.txt' )]


def  iterateDays ( ahora ):
    for i in range ( len(day_en)):
        if day in [ i ] in now:
         now  = now.replace( day_en [i], day_es [i])
    return now

def  getDay ():
    now = date.today().strftime( "%A, %d de %B del %Y" ). inferior ()
    return iterateDays(now)

def  getDaysAgo ( rec ):
    value =""
    if 'ayer'  in   rec :
        días  =  1
        valor  =  'ayer'
    elif  'antier'  in  rec :
        days  =  2
        value  =  'antier'
        
    else :
        rec  =  rec.replace ( "," , "" )
        rec  =  rec.split ()
        días  =  0

        for i in range(len( rec )):
            try: 
                days  =  float( rec [ i ])
                break
            except:
                pass
    
    if days  !=  0 :
        try:
            now= date.today() -  timedelta ( days= days )
            ahora  =  ahora . strftime ( "%A, %d de %B del %Y" ). inferior ()

            if value  !=  "" :
                return  f" { valor } fue { iterateDays ( ahora ) } "
            else :
                return  f"Hace { days } días fue { iterateDays ( now ) } "
        except :
            return  "Aun no existimos"
    else :
        return  "No entendí"

def  speak( text ):
    engine.say( text )
    engine.runAndWait()

def  get_audio ():
    r  =  sr.Recognizer()
    status  =  False

    with  Sr.Microphone () as source:
        print ( f" { green_color } ( { attemts } ) Escuchando... { normal_color } " )
        r.adjust_for_ambient_noise( source , duration = 1 )
        audio  =  r.listen( source )
        Rec  =  ""

        try :
            rec  =  r . reconocer_google ( audio , idioma = 'es-ES' ). inferior ()
            
            if name in rec :
                rec  =  rec.replace( f" { nombre } " , "" ). reemplazar ( "á" , "a" ). reemplazar ( "é" , "e" ). reemplazar ( " i" , "i" ). reemplazar ( "o" , "o" ). reemplazar ( "ú" , "u" )
                estado  =  Verdadero
            else :
                print ( f"Vuelve a intentarlo, no reconozco: { rec } " )
        except :
            pass
    return { 'texto' : rec , 'estado' : estado }

while True :
    rec_json  =  get_audio ()

    rec  =  rec_json [ 'text' ]
    status  =  rec_json [ 'status' ]
    
    print(rec_json)

    if status :
        if  'estas ahi'  in  rec :
            speak ( 'Por supuesto' )

        elif  'reproduce'  in  rec :
            if  'spotify'  in  rec :
                músic  =  rec . reemplazar ( 'reproducir en spotify' , '' )
                speak ( f'Reproduciendo { músic } ' )
                spoty.play(keys[ "spoty_client_id" ], teclas [ "spoty_client_secret" ], música )
            else :
                músic  =  rec . reemplazar ( 'reproducir' , '' )
                speak ( f'Reproduciendo { música } ' )
                pywhatkit.playonyt ( músic )
                # yt.play(música)

        elif  'cuantos suscriptores tiene'  in  rec :
            nombre_subs  =  rec . replace ( 'cuantos usuarios tiene' , '' )
            
            speak ( "Procesando..." )
            while True:
                
             try :
                    channel  =  yt.getChannelInfo ( name_subs )
                    speak ( channel [ "nombre" ] +  " tiene "  +  canal [ "subs" ])
                    break
             except:    
                    speak( "Volviendo a intentar..." )
                    continue
      
      
        elif 'que' in rec :
              if 'hora'  in  rec :
                hora  = datetime().strftime ( '%I:%M %p' )
                speak ( f"Son las { hora } " )


        elif  'dia'  in  rec :
                if  'fue'  in  rec :
                    speak ( f" { getDaysAgo ( rec ) } " )
                else :
                    speak(text) ( f"Hoy es { getDay () } " )

        elif  'busca' in rec :
             orden  =  rec . reemplazar ( 'busca' , '' )
             wikipedia . set_lang ( "es" )
             info  =  wikipedia.summary ( orden , 1 )
             speak ( info )

        elif  'chiste'  in  rec :
            chiste  =  pyjokes.get_joke ( "es" )
            speak ( chiste )

        elif  'cuanto es'  in  rec :
            speak ( sm.getResult ( rec ))

        elif  'descansa'  in  rec :
            speak(text) ( "Saliendo..." )
            break

        else :
            print ( f"Vuelve a intentarlo, no reconozco: { rec } " )
        
        attemts  =  0
    else :
        attemts  +=  1

print ( f" { red_color } PROGRAMA FINALIZADO CON UNA DURACIÓN DE: {  int ( time () -  start_time ) } SEGUNDOS { normal_color } " )
